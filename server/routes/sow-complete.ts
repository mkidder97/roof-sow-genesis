// Enhanced SOW Generation API Route - Phase 1 Complete Implementation
import express from 'express';
import { createSOWEngine, testSOWGeneration, createProjectInputsFromFieldInspection, SOWGenerationRequest } from '../logic/sow-engine';

const router = express.Router();

/**
 * Complete SOW Generation endpoint
 * POST /api/sow/generate-complete
 */
router.post('/generate-complete', async (req, res) => {
  try {
    console.log('🚀 Complete SOW generation requested');
    
    const { projectInputs, options } = req.body as SOWGenerationRequest;
    
    if (!projectInputs) {
      return res.status(400).json({
        success: false,
        error: 'Project inputs are required',
        code: 'MISSING_INPUTS'
      });
    }

    const engine = createSOWEngine();
    const result = await engine.generateSOW({ projectInputs, options });

    if (result.success) {
      console.log(`✅ SOW generated successfully: ${result.metadata.templateType}, ${result.metadata.totalSections} sections`);\n      \n      res.json({\n        success: true,\n        data: {\n          document: result.document,\n          windAnalysis: result.windAnalysis,\n          metadata: result.metadata\n        },\n        validation: result.validation,\n        timing: {\n          generationTime: result.metadata.generationTime,\n          timestamp: new Date().toISOString()\n        }\n      });\n    } else {\n      console.error('❌ SOW generation failed:', result.errors);\n      \n      res.status(400).json({\n        success: false,\n        errors: result.errors,\n        validation: result.validation,\n        metadata: result.metadata\n      });\n    }\n    \n  } catch (error) {\n    console.error('❌ SOW generation API error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error during SOW generation',\n      details: error.message\n    });\n  }\n});\n\n/**\n * Generate SOW from field inspection data\n * POST /api/sow/generate-from-inspection/:inspectionId\n */\nrouter.post('/generate-from-inspection/:inspectionId', async (req, res) => {\n  try {\n    const { inspectionId } = req.params;\n    const { options } = req.body;\n    \n    console.log(`🔍 Generating SOW from field inspection: ${inspectionId}`);\n    \n    // This would normally fetch from database\n    // For now, we'll use the test data\n    const fieldInspectionData = {\n      id: inspectionId,\n      project_name: 'Southridge 12',\n      project_address: '2405 Commerce Park Drive, Orlando, FL',\n      square_footage: 41300,\n      building_height: 42,\n      deck_type: 'Steel',\n      roof_drains: [1, 2, 3, 4, 5, 6],\n      hvac_units: [1, 2, 3, 4],\n      penetrations: Array(12).fill(null).map((_, i) => ({ id: i + 1 })),\n      roof_hatches: 2,\n      insulation_type: 'Polyisocyanurate'\n    };\n    \n    const projectInputs = createProjectInputsFromFieldInspection(fieldInspectionData);\n    \n    const engine = createSOWEngine();\n    const result = await engine.generateSOW({ projectInputs, options });\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        data: {\n          inspectionId,\n          document: result.document,\n          windAnalysis: result.windAnalysis,\n          metadata: result.metadata\n        },\n        validation: result.validation\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        inspectionId,\n        errors: result.errors,\n        validation: result.validation\n      });\n    }\n    \n  } catch (error) {\n    console.error('❌ Field inspection SOW generation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate SOW from field inspection',\n      details: error.message\n    });\n  }\n});\n\n/**\n * Validate project inputs without generating SOW\n * POST /api/sow/validate\n */\nrouter.post('/validate', async (req, res) => {\n  try {\n    const { projectInputs } = req.body;\n    \n    if (!projectInputs) {\n      return res.status(400).json({\n        success: false,\n        error: 'Project inputs are required for validation'\n      });\n    }\n\n    const engine = createSOWEngine();\n    const result = await engine.generateSOW({\n      projectInputs,\n      options: { validateOnly: true }\n    });\n\n    res.json({\n      success: true,\n      validation: result.validation,\n      metadata: {\n        templateType: result.metadata.templateType,\n        estimatedSections: result.metadata.totalSections\n      },\n      windAnalysis: result.windAnalysis ? {\n        pressures: result.windAnalysis.pressures,\n        metadata: result.windAnalysis.metadata\n      } : undefined\n    });\n    \n  } catch (error) {\n    console.error('❌ Validation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Validation failed',\n      details: error.message\n    });\n  }\n});\n\n/**\n * Test SOW generation with sample data\n * GET /api/sow/test\n */\nrouter.get('/test', async (req, res) => {\n  try {\n    console.log('🧪 Running SOW generation test');\n    \n    const result = await testSOWGeneration();\n    \n    res.json({\n      success: true,\n      testResult: result,\n      message: 'SOW generation test completed',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ Test SOW generation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Test SOW generation failed',\n      details: error.message\n    });\n  }\n});\n\n/**\n * Get available templates and their requirements\n * GET /api/sow/templates\n */\nrouter.get('/templates', (req, res) => {\n  try {\n    const templates = {\n      T6: {\n        id: 'T6',\n        name: 'tearoff-tpo-ma-insul-steel',\n        description: 'Steel Deck Tearoff with Mechanically Attached TPO',\n        requirements: {\n          project_type: 'tearoff',\n          deck_type: 'Steel',\n          attachment_method: 'mechanical'\n        }\n      },\n      T7: {\n        id: 'T7',\n        name: 'tearoff-tpo-ma-insul-lwc-steel',\n        description: 'LWC Steel Deck Tearoff with Mechanically Attached TPO',\n        requirements: {\n          project_type: 'tearoff',\n          deck_type: 'Steel',\n          cover_board: 'Lightweight Concrete'\n        }\n      },\n      T8: {\n        id: 'T8',\n        name: 'tearoff-tpo-adhered-insul-adhered-gypsum',\n        description: 'Gypsum Deck Tearoff with Fully Adhered TPO',\n        requirements: {\n          project_type: 'tearoff',\n          deck_type: 'Gypsum',\n          attachment_method: 'fully_adhered'\n        }\n      },\n      T5: {\n        id: 'T5',\n        name: 'recover-tpo-rhino-iso-eps-flute-fill-ssr',\n        description: 'SSR Recover System',\n        requirements: {\n          project_type: 'recover',\n          system_type: 'recover'\n        }\n      }\n    };\n\n    res.json({\n      success: true,\n      templates,\n      total: Object.keys(templates).length\n    });\n    \n  } catch (error) {\n    console.error('❌ Templates endpoint error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve templates'\n    });\n  }\n});\n\n/**\n * Get wind analysis for a location\n * POST /api/sow/wind-analysis\n */\nrouter.post('/wind-analysis', async (req, res) => {\n  try {\n    const { projectInputs } = req.body;\n    \n    if (!projectInputs || !projectInputs.address) {\n      return res.status(400).json({\n        success: false,\n        error: 'Project inputs with address are required'\n      });\n    }\n\n    const engine = createSOWEngine();\n    const result = await engine.generateSOW({\n      projectInputs,\n      options: {\n        validateOnly: true,\n        includeWindAnalysis: true\n      }\n    });\n\n    if (result.windAnalysis) {\n      res.json({\n        success: true,\n        windAnalysis: result.windAnalysis,\n        validation: result.validation.windValidation\n      });\n    } else {\n      res.status(400).json({\n        success: false,\n        error: 'Wind analysis could not be completed',\n        validation: result.validation\n      });\n    }\n    \n  } catch (error) {\n    console.error('❌ Wind analysis error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Wind analysis failed',\n      details: error.message\n    });\n  }\n});\n\n/**\n * System status and health check\n * GET /api/sow/status\n */\nrouter.get('/status', (req, res) => {\n  try {\n    const status = {\n      service: 'SOW Generation Engine',\n      version: '1.0.0',\n      status: 'operational',\n      features: {\n        sectionSelection: 'enabled',\n        contentGeneration: 'enabled',\n        windAnalysis: 'enabled',\n        templateSupport: ['T5', 'T6', 'T7', 'T8'],\n        jurisdictionMapping: 'enabled'\n      },\n      performance: {\n        averageGenerationTime: '< 2 seconds',\n        supportedInputFormats: ['field_inspection', 'manual_input'],\n        outputFormats: ['json', 'structured_document']\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    res.json({\n      success: true,\n      status\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: 'Status check failed'\n    });\n  }\n});\n\nexport default router;