name: ü§ñ CI Pipeline with Enhanced Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Basic health check and setup validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.any }}
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìã Project Structure Check
        run: |
          echo "=== Root Directory ==="
          ls -la
          echo ""
          echo "=== Server Directory ==="
          ls -la server/ || echo "No server directory"
          echo ""
          echo "=== Package.json Files ==="
          find . -name "package.json" -type f
          echo ""
          echo "=== TypeScript Config Files ==="
          find . -name "tsconfig*.json" -type f
        continue-on-error: true

      - name: üì¶ Install Root Dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci || npm install
        continue-on-error: true

      - name: üîç Check for changes
        id: changes
        run: |
          echo "any=true" >> $GITHUB_OUTPUT

  # TypeScript Type Checking (MUST PASS)
  type-check:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has_changes == 'true'
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Root Dependencies
        run: npm ci

      - name: üì¶ Install Server Dependencies
        working-directory: ./server
        run: npm install

      - name: üîç TypeScript Check - Root Project
        run: |
          echo "Running TypeScript check for root project..."
          # Use tsc --noEmit for type checking without building
          npx tsc --noEmit
          echo "‚úÖ Root project TypeScript check passed"

      - name: üîç TypeScript Check - Server Project
        working-directory: ./server
        run: |
          echo "Running TypeScript check for server project..."
          # Use tsc --noEmit for type checking without building
          npx tsc --noEmit
          echo "‚úÖ Server project TypeScript check passed"

  # Dedicated Unit Testing (MUST PASS)  
  unit-test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has_changes == 'true'
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Root Dependencies
        run: npm ci

      - name: üì¶ Install Server Dependencies
        working-directory: ./server
        run: npm install

      - name: üß™ Run Root Unit Tests
        run: |
          echo "Running root project unit tests..."
          npm run test:unit
          echo "‚úÖ Root unit tests passed"

      - name: üß™ Run Server Unit Tests
        working-directory: ./server
        run: |
          echo "Running server unit tests..."
          npm run test
          echo "‚úÖ Server unit tests passed"

  # Frontend build and lint (MUST PASS)
  frontend:
    runs-on: ubuntu-latest
    needs: [setup, type-check]
    if: needs.setup.outputs.has_changes == 'true'
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üßπ Lint Frontend
        run: npm run lint

      - name: üîß Build Frontend
        run: npm run build

      - name: üìä Upload Frontend Build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: dist/
          retention-days: 1

  # Backend build (MUST PASS)
  backend:
    runs-on: ubuntu-latest
    needs: [setup, type-check]
    if: needs.setup.outputs.has_changes == 'true'
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üñ•Ô∏è Setup Chrome for Puppeteer
        uses: browser-actions/setup-chrome@v1

      - name: üì¶ Install Root Dependencies
        run: npm ci

      - name: üì¶ Install Server Dependencies
        working-directory: ./server
        run: npm install

      - name: üîß Build Backend
        working-directory: ./server
        run: npm run build

      - name: üìä Upload Backend Build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build
          path: server/dist/
          retention-days: 1

  # Smoke Test (MUST PASS)
  smoke-test:
    runs-on: ubuntu-latest
    needs: [frontend, backend, unit-test]
    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üñ•Ô∏è Setup Chrome for Puppeteer
        uses: browser-actions/setup-chrome@v1

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üì¶ Install Server Dependencies
        working-directory: ./server
        run: npm install

      - name: üì• Download Backend Build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: server/dist/

      - name: üöÄ Start API Server
        working-directory: ./server
        run: |
          echo "Starting API server in background..."
          tsx index.ts &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "‚úÖ Server is responding!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Server failed to start within 30 seconds"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done
        env:
          NODE_ENV: test

      - name: üîç Test API Health Endpoint
        run: |
          echo "Testing /health endpoint..."
          
          # Test health endpoint
          response=$(curl -s -w "%{http_code}" http://localhost:3001/health)
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          echo "HTTP Status: $http_code"
          echo "Response Body: $body"
          
          if [ "$http_code" != "200" ]; then
            echo "‚ùå Health check failed with status $http_code"
            exit 1
          fi
          
          echo "‚úÖ Health check passed!"

      - name: üîç Test API Basic Endpoints
        run: |
          echo "Testing additional API endpoints..."
          
          # Test root endpoint
          if curl -f http://localhost:3001/ >/dev/null 2>&1; then
            echo "‚úÖ Root endpoint responding"
          else
            echo "‚ö†Ô∏è Root endpoint not responding (may be expected)"
          fi
          
          # Test any other critical endpoints
          echo "‚úÖ Basic endpoint tests completed!"

      - name: üß™ Run Smoke Test Suite
        run: |
          echo "Running comprehensive smoke tests..."
          npm run test:smoke
          echo "‚úÖ Smoke test suite passed!"

      - name: üõë Stop API Server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping server (PID: $SERVER_PID)..."
            kill $SERVER_PID 2>/dev/null || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
          fi

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [setup, type-check, unit-test, frontend, backend, smoke-test]
    if: always()
    steps:
      - name: üìã CI Summary
        run: |
          echo "## ü§ñ Enhanced CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} | Project structure validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result }} | TypeScript validation (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-test.result }} | Dedicated unit testing (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend.result }} | Build and lint (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend.result }} | Build (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Test | ${{ needs.smoke-test.result }} | Integration tests (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical jobs failed
          if [[ "${{ needs.type-check.result }}" != "success" || 
                "${{ needs.unit-test.result }}" != "success" || 
                "${{ needs.frontend.result }}" != "success" || 
                "${{ needs.backend.result }}" != "success" || 
                "${{ needs.smoke-test.result }}" != "success" ]]; then
            echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical jobs failed. Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Quality Gates:" >> $GITHUB_STEP_SUMMARY
            echo "- **Type Check**: Ensures TypeScript compilation without errors" >> $GITHUB_STEP_SUMMARY
            echo "- **Unit Tests**: Validates core functionality with test suites" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: Confirms linting and build success" >> $GITHUB_STEP_SUMMARY
            echo "- **Backend**: Validates server build process" >> $GITHUB_STEP_SUMMARY
            echo "- **Smoke Test**: Tests end-to-end functionality" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ‚úÖ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "All enhanced quality gates passed successfully! üéâ" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Validated:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ TypeScript type safety" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Unit test coverage" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Frontend build & lint" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Backend compilation" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ End-to-end functionality" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ‚úÖ Pipeline Complete
        run: echo "üéâ Enhanced CI pipeline completed with strict quality gates!"
