name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Install dependencies and setup workspace
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 📦 Install workspace dependencies
        run: npm ci --workspaces --ignore-scripts

  # Lint all packages
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install workspace dependencies
        run: npm ci --workspaces --ignore-scripts

      - name: 🧹 Lint API Server
        run: npm run lint --workspace=packages/api-server

      - name: 🧹 Lint Web Client
        run: npm run lint --workspace=packages/web-client

  # Build all packages
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install workspace dependencies
        run: npm ci --workspaces --ignore-scripts

      - name: 🔧 Build API Server
        run: npm run build:api-server

      - name: 🔧 Build Web Client
        run: npm run build:web-client

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/api-server/dist/
            packages/web-client/dist/
          retention-days: 1

  # Run unit tests
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install workspace dependencies
        run: npm ci --workspaces --ignore-scripts

      - name: 🧪 Test API Server
        run: npm run test:unit --workspace=packages/api-server

      - name: 🧪 Test Web Client
        run: npm run test:unit --workspace=packages/web-client

  # Smoke test (integration test)
  smoke-test:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🖥️ Setup Chrome for Puppeteer
        uses: browser-actions/setup-chrome@v1

      - name: 📦 Install workspace dependencies
        run: npm ci --workspaces --ignore-scripts

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./

      - name: 🚀 Start API Server
        run: |
          npm run dev --workspace=packages/api-server &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "✅ Server is responding on port 3001!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Server failed to start within 30 seconds"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done
        env:
          NODE_ENV: test

      - name: 🔍 Health Check
        run: |
          echo "Testing API health endpoint..."
          response=$(curl -s -w "%{http_code}" http://localhost:3001/health)
          http_code=$(echo "$response" | tail -c 4)
          body=$(echo "$response" | head -c -4)
          
          echo "HTTP Status: $http_code"
          echo "Response Body: $body"
          
          if [ "$http_code" != "200" ]; then
            echo "❌ Health check failed with status $http_code"
            exit 1
          fi
          
          echo "✅ Health check passed!"

      - name: 🛑 Stop API Server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping server (PID: $SERVER_PID)..."
            kill $SERVER_PID 2>/dev/null || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
          fi

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [setup, lint, build, test, smoke-test]
    if: always()
    steps:
      - name: 📋 CI Summary
        run: |
          echo "## 🤖 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} | Workspace dependency installation |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} | Code quality checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | TypeScript compilation |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} | Unit tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Test | ${{ needs.smoke-test.result }} | Integration tests |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any jobs failed
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.smoke-test.result }}" != "success" ]]; then
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more jobs failed. Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "All jobs passed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Pipeline Complete
        run: echo "🎉 CI pipeline completed successfully!"