name: 🤖 CI Pipeline with Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Basic health check and setup validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.any }}
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Project Structure Check
        run: |
          echo "=== Root Directory ==="
          ls -la
          echo ""
          echo "=== Packages Directory ==="
          ls -la packages/ || echo "No packages directory"
          echo ""
          echo "=== Server Directory ==="
          ls -la server/ || echo "No server directory"
          echo ""
          echo "=== Package.json Files ==="
          find . -name "package.json" -type f
        continue-on-error: true

      - name: 📦 Install Root Dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci || npm install
        continue-on-error: true

      - name: 🔍 Check for changes
        id: changes
        run: |
          echo "any=true" >> $GITHUB_OUTPUT

  # Frontend build and lint (Root-level frontend)
  frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: cd packages/web-client && npm ci

      - name: 🧹 Lint Frontend
        run: cd packages/web-client && npm run lint

      - name: 🔧 Build Frontend
        run: cd packages/web-client && npm run build

      - name: 📊 Upload Frontend Build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: packages/web-client/dist/
          retention-days: 1

  # Backend builds
  backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🖥️ Setup Chrome for Puppeteer
        uses: browser-actions/setup-chrome@v1

      - name: 📦 Install Dependencies
        run: cd packages/api-server && npm ci

      - name: 🧹 Lint Backend
        run: cd packages/api-server && npm run lint

      - name: 🔧 Build Backend
        run: cd packages/api-server && npm run build

      - name: 📊 Upload Backend Builds
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-builds
          path: packages/api-server/dist/
          retention-days: 1

  # Unit Tests (MUST PASS)
  test:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🧪 Test API Server Package
        run: |
          cd packages/api-server && npm ci && npm run test:unit

      - name: 🧪 Test Web Client Package
        run: |
          cd packages/web-client && npm ci && npm run test:unit

  # Smoke Test (MUST PASS)
  smoke-test:
    runs-on: ubuntu-latest
    needs: [frontend, backend, test]
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🖥️ Setup Chrome for Puppeteer
        uses: browser-actions/setup-chrome@v1

      - name: 🚀 Start API Server & Test Health
        run: |
          cd packages/api-server && npm ci && npm run dev & sleep 5
          curl --fail http://localhost:3000/health

  # Summary job - simplified and always runs
  summary:
    runs-on: ubuntu-latest
    needs: [setup, frontend, backend, test, smoke-test]
    if: always()
    steps:
      - name: 📋 CI Summary
        run: |
          echo "## 🤖 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} | Project structure validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend.result }} | Frontend build & lint (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.backend.result }} | Backend build & lint (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} | Unit tests (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Test | ${{ needs.smoke-test.result }} | Integration tests (ENFORCED) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Report status of jobs that ran
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Smoke Test: ${{ needs.smoke-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical jobs failed
          if [[ "${{ needs.frontend.result }}" != "success" || 
                "${{ needs.backend.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.smoke-test.result }}" != "success" ]]; then
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical jobs failed. Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
            echo "All jobs passed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Pipeline Complete
        run: echo "🎉 CI pipeline completed with enforced quality gates!"
